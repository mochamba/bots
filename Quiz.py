import telebot, time
import pymongo
from pymongo import MongoClient

bot = telebot.TeleBot('')
#–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π
class DataBase:
    def __init__(self):
        cluster = MongoClient("")
        self.db=cluster.QuizBot
        self.users=self.db.Users
        self.questions=self.db.Questions
        self.questions_count=len(list(self.questions.find({})))
#–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è—é—â–∞—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
    def get_user(self,chat_id):
        user=self.users.find_one({"chat_id":chat_id})
        if user is not None:
            return user
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–ª–æ–≤–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        user ={
            "chat_id": chat_id,
            "is_passing" : False,
            "is_passed" :False,
            "question_index": None,
            "answers":[]
            }

        self.users.insert_one(user)

        return user

    #–§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª—è—é—â–∞—è –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    def set_user(self,chat_id,update):
        self.users.update_one({"chat_id":chat_id},{"$set":update})


    #   –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞—é—â–∞—è –≤–æ–ø—Ä–æ—Å –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É
    def get_questions(self,index):
        quest=self.questions.find_one({"id":index})
        return quest

db=DataBase()

#–î–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ —Å—Ç–∞—Ä—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã,—Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@bot.message_handler(commands=["start"])
def start(message):
    user=db.get_user(message.chat.id)
    if user["is_passed"]:
        bot.send_message(message.from_user.id,"–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —ç—Ç—É –≤–∏–∫—Ç–æ—Ä–∏–Ω—É. –í–¢–æ—Ä–æ–π —Ä–∞–∑ –ø—Ä–æ–π—Ç–∏ –Ω–µ–ª—å–∑—è")
        return

    if user["is_passing"]:
        return

    db.set_user(message.chat.id,{"question_index":0,"is_passing":True})
    user = db.get_user(message.chat.id)

    post=get_question_message(user)
    if post is not None:
        bot.send_message(message.from_user.id, post["text"],reply_markup=post["keyboard"])

# –§—É–Ω–∫—Ü–∏—è –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –±–æ—Ç—É –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
@bot.callback_query_handler(func=lambda query: query.data.startswith("?ans"))
def aswered(query):
    user= db.get_user(query.message.chat.id)

    if user is None or user["is_passed"] or not user["is_passing"]:
        return

    user["answers"].append(int(query.data.split('&')[1]))
    db.set_user(query.message.chat.id,{"answers":user["answers"]})

    post = get_answered_message(user)
    if post is not None:
            bot.edit_message_text(post["text"],query.message.chat.id,query.message.id,reply_markup=post["keyboard"])

# –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞—é—â–∞—è—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–∞–ª–µ–µ
@bot.callback_query_handler(func=lambda query:query.data==("?next"))
def next(query):
    user=db.get_user(query.message.chat.id)

    if user["is_passed"] or not user["is_passing"]:
        return

    user["question_index"]+=1
    db.set_user(query.message.chat.id, {"question_index":user["question_index"]})

    post=get_question_message(user)
    if post is not None:
        bot.edit_message_text(post["text"],query.message.chat.id,query.message.id,reply_markup=post["keyboard"])

#–§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞—é—â–∞—è —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
def get_question_message(user):
    if user["question_index"]==db.questions_count:
        count=0
        for question_index, question in enumerate(db.questions.find({})):
            if question["correct"]==user["answers"][question_index]:
                count+=1
        percents=round(100*count / db.questions_count)
        if percents<40:
            smile='üò≠'
        elif percents <90:
            smile='üôÇ'
        else :
            smile='ü§©'

        text=f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ {percents}% –≤–æ–ø—Ä–æ—Å–æ–≤ {smile}"
        db.set_user(user["chat_id"], {"is_passed":True,"is_passing":False})

        return{
            "text": text,
            "keyboard": None
                }
    #–í –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é question –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ –Ω–æ–º–µ—Ä—É
    question=db.get_questions(user["question_index"])

    if question is None:
        return
    keyboard=telebot.types.InlineKeyboardMarkup()
    for answer_index,answer in enumerate(question["answers"]):
            keyboard.row(telebot.types.InlineKeyboardButton(f"{answer}",callback_data=f"?ans&{answer_index}"))

    # –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç–µ—Ö—Ç –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å–æ–¥–µ—Ä–∂–∞—â—É—é –Ω–æ–º–µ—Ä –∏ —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    text= f"–í–æ–ø—Ä–æ—Å ‚Ññ{user['question_index'] + 1}\n{question['text']}\n"

    return{
            "text":text,
            "keyboard":keyboard
            }
def get_answered_message(user):
    question=db.get_questions(user["question_index"])

    # –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ç–µ—Ö—Ç –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å–æ–¥–µ—Ä–∂–∞—â—É—é –Ω–æ–º–µ—Ä –∏ —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    text = f"–í–æ–ø—Ä–æ—Å ‚Ññ{user['question_index'] + 1}\n{question['text']}\n"

# —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–π –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—é—â–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    for answer_index,answer in enumerate(question["answers"]):
        text+=f" {answer}"
        if answer_index==question["correct"]:
            text+="‚úÖ"
        elif answer_index==user['answers'][-1]:
            text+="‚ùå"

        text+='\n'

    keyboard=telebot.types.InlineKeyboardMarkup()
    keyboard.row(telebot.types.InlineKeyboardButton("–î–∞–ª–µ–µ",callback_data="?next"))

    return {
        "text": text,
        "keyboard": keyboard
    }


bot.polling()